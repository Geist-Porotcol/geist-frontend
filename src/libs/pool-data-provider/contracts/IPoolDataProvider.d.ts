/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { ethers, EventFilter, Signer, BigNumber, PopulatedTransaction } from 'ethers';
import { Contract, CallOverrides } from '@ethersproject/contracts';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment } from '@ethersproject/abi';

interface IPoolDataProviderInterface extends ethers.utils.Interface {
  functions: {
    'getReservesData(address)': FunctionFragment;
    'getUserReservesData(address,address)': FunctionFragment;
  };

  events: {};
}

export class IPoolDataProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IPoolDataProviderInterface;

  functions: {
    getReservesData(
      provider: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        underlyingAsset: string;
        name: string;
        symbol: string;
        decimals: number;
        isActive: boolean;
        usageAsCollateralEnabled: boolean;
        borrowingEnabled: boolean;
        stableBorrowRateEnabled: boolean;
        baseLTVasCollateral: BigNumber;
        averageStableBorrowRate: BigNumber;
        liquidityIndex: BigNumber;
        reserveLiquidationThreshold: BigNumber;
        reserveLiquidationBonus: BigNumber;
        variableBorrowIndex: BigNumber;
        variableBorrowRate: BigNumber;
        availableLiquidity: BigNumber;
        stableBorrowRate: BigNumber;
        liquidityRate: BigNumber;
        totalBorrowsStable: BigNumber;
        totalBorrowsVariable: BigNumber;
        totalLiquidity: BigNumber;
        utilizationRate: BigNumber;
        lastUpdateTimestamp: number;
        priceInEth: BigNumber;
        aTokenAddress: string;
        0: string;
        1: string;
        2: string;
        3: number;
        4: boolean;
        5: boolean;
        6: boolean;
        7: boolean;
        8: BigNumber;
        9: BigNumber;
        10: BigNumber;
        11: BigNumber;
        12: BigNumber;
        13: BigNumber;
        14: BigNumber;
        15: BigNumber;
        16: BigNumber;
        17: BigNumber;
        18: BigNumber;
        19: BigNumber;
        20: BigNumber;
        21: BigNumber;
        22: number;
        23: BigNumber;
        24: string;
      }[];
      1: BigNumber;
    }>;

    getUserReservesData(
      provider: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        underlyingAsset: string;
        principalATokenBalance: BigNumber;
        userBalanceIndex: BigNumber;
        redirectedBalance: BigNumber;
        interestRedirectionAddress: string;
        usageAsCollateralEnabledOnUser: boolean;
        borrowRate: BigNumber;
        borrowRateMode: number;
        originationFee: BigNumber;
        principalBorrows: BigNumber;
        variableBorrowIndex: BigNumber;
        lastUpdateTimestamp: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: string;
        5: boolean;
        6: BigNumber;
        7: number;
        8: BigNumber;
        9: BigNumber;
        10: BigNumber;
        11: BigNumber;
      }[];
    }>;
  };

  getReservesData(
    provider: string,
    overrides?: CallOverrides
  ): Promise<{
    0: {
      underlyingAsset: string;
      name: string;
      symbol: string;
      decimals: number;
      isActive: boolean;
      usageAsCollateralEnabled: boolean;
      borrowingEnabled: boolean;
      stableBorrowRateEnabled: boolean;
      baseLTVasCollateral: BigNumber;
      averageStableBorrowRate: BigNumber;
      liquidityIndex: BigNumber;
      reserveLiquidationThreshold: BigNumber;
      reserveLiquidationBonus: BigNumber;
      variableBorrowIndex: BigNumber;
      variableBorrowRate: BigNumber;
      availableLiquidity: BigNumber;
      stableBorrowRate: BigNumber;
      liquidityRate: BigNumber;
      totalBorrowsStable: BigNumber;
      totalBorrowsVariable: BigNumber;
      totalLiquidity: BigNumber;
      utilizationRate: BigNumber;
      lastUpdateTimestamp: number;
      priceInEth: BigNumber;
      aTokenAddress: string;
      0: string;
      1: string;
      2: string;
      3: number;
      4: boolean;
      5: boolean;
      6: boolean;
      7: boolean;
      8: BigNumber;
      9: BigNumber;
      10: BigNumber;
      11: BigNumber;
      12: BigNumber;
      13: BigNumber;
      14: BigNumber;
      15: BigNumber;
      16: BigNumber;
      17: BigNumber;
      18: BigNumber;
      19: BigNumber;
      20: BigNumber;
      21: BigNumber;
      22: number;
      23: BigNumber;
      24: string;
    }[];
    1: BigNumber;
  }>;

  getUserReservesData(
    provider: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<
    {
      underlyingAsset: string;
      principalATokenBalance: BigNumber;
      userBalanceIndex: BigNumber;
      redirectedBalance: BigNumber;
      interestRedirectionAddress: string;
      usageAsCollateralEnabledOnUser: boolean;
      borrowRate: BigNumber;
      borrowRateMode: number;
      originationFee: BigNumber;
      principalBorrows: BigNumber;
      variableBorrowIndex: BigNumber;
      lastUpdateTimestamp: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: string;
      5: boolean;
      6: BigNumber;
      7: number;
      8: BigNumber;
      9: BigNumber;
      10: BigNumber;
      11: BigNumber;
    }[]
  >;

  staticCall: {
    getReservesData(
      provider: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        underlyingAsset: string;
        name: string;
        symbol: string;
        decimals: number;
        isActive: boolean;
        usageAsCollateralEnabled: boolean;
        borrowingEnabled: boolean;
        stableBorrowRateEnabled: boolean;
        baseLTVasCollateral: BigNumber;
        averageStableBorrowRate: BigNumber;
        liquidityIndex: BigNumber;
        reserveLiquidationThreshold: BigNumber;
        reserveLiquidationBonus: BigNumber;
        variableBorrowIndex: BigNumber;
        variableBorrowRate: BigNumber;
        availableLiquidity: BigNumber;
        stableBorrowRate: BigNumber;
        liquidityRate: BigNumber;
        totalBorrowsStable: BigNumber;
        totalBorrowsVariable: BigNumber;
        totalLiquidity: BigNumber;
        utilizationRate: BigNumber;
        lastUpdateTimestamp: number;
        priceInEth: BigNumber;
        aTokenAddress: string;
        0: string;
        1: string;
        2: string;
        3: number;
        4: boolean;
        5: boolean;
        6: boolean;
        7: boolean;
        8: BigNumber;
        9: BigNumber;
        10: BigNumber;
        11: BigNumber;
        12: BigNumber;
        13: BigNumber;
        14: BigNumber;
        15: BigNumber;
        16: BigNumber;
        17: BigNumber;
        18: BigNumber;
        19: BigNumber;
        20: BigNumber;
        21: BigNumber;
        22: number;
        23: BigNumber;
        24: string;
      }[];
      1: BigNumber;
    }>;

    getUserReservesData(
      provider: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      {
        underlyingAsset: string;
        principalATokenBalance: BigNumber;
        userBalanceIndex: BigNumber;
        redirectedBalance: BigNumber;
        interestRedirectionAddress: string;
        usageAsCollateralEnabledOnUser: boolean;
        borrowRate: BigNumber;
        borrowRateMode: number;
        originationFee: BigNumber;
        principalBorrows: BigNumber;
        variableBorrowIndex: BigNumber;
        lastUpdateTimestamp: BigNumber;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: string;
        5: boolean;
        6: BigNumber;
        7: number;
        8: BigNumber;
        9: BigNumber;
        10: BigNumber;
        11: BigNumber;
      }[]
    >;
  };

  filters: {};

  estimateGas: {
    getReservesData(provider: string): Promise<BigNumber>;
    getUserReservesData(provider: string, user: string): Promise<BigNumber>;
  };

  populateTransaction: {
    getReservesData(provider: string): Promise<PopulatedTransaction>;
    getUserReservesData(provider: string, user: string): Promise<PopulatedTransaction>;
  };
}
